{
  "paragraphs": [
    {
      "title": "Load Libraries",
      "text": "import plotly\nimport plotly.graph_objs as go",
      "user": "yoav.salarios@harman.com",
      "dateUpdated": "Oct 4, 2020 10:05:18 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {
          "battery_data_table": "s3://qubole-innovation-dev/battery-prognosis/delta/R4/",
          "outlier_level": "general"
        },
        "forms": {}
      },
      "version": "v1",
      "jobName": "paragraph_1599662902955_575898477",
      "id": "20200909-144822_1583651619_q_NFXV8WWJ5T1601379489",
      "dateCreated": "Sep 9, 2020 2:43:48 PM",
      "dateSubmitted": "Oct 4, 2020 10:05:18 AM",
      "dateStarted": "Oct 4, 2020 10:05:18 AM",
      "dateFinished": "Oct 4, 2020 10:05:18 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 1000
    },
    {
      "text": "\u0027\u0027\u0027\nRead input parameters\n\u0027\u0027\u0027\nthresh \u003d z.input(\"outlier_level\") # general or strict\nbattery_data_table \u003d z.input(\"battery_data_table\") # Location of table in delta lake format\n\nif (thresh \u003d\u003d \"general\"):\n    threshold\u003d1.5\nelif (thresh \u003d\u003d \"strict\"):\n    threshold \u003d 3.0\nelse:\n    threshold \u003d 1.5\n",
      "user": "yoav.salarios@harman.com",
      "dateUpdated": "Oct 4, 2020 10:05:20 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {
          "outlier_level": "general",
          "bucket_name": "",
          "file_name": "",
          "battery_data_table": "s3://qubole-innovation-dev/battery-prognosis/delta/R4/"
        },
        "forms": {
          "outlier_level": {
            "name": "outlier_level",
            "displayName": "outlier_level",
            "type": "input",
            "defaultValue": "",
            "hidden": false
          },
          "battery_data_table": {
            "name": "battery_data_table",
            "displayName": "battery_data_table",
            "type": "input",
            "defaultValue": "",
            "hidden": false
          }
        }
      },
      "version": "v1",
      "jobName": "paragraph_1601441175978_-526315662",
      "id": "20200930-044615_1632491615_q_NFXV8WWJ5T1601379489",
      "dateCreated": "Sep 30, 2020 4:46:15 AM",
      "dateSubmitted": "Oct 4, 2020 10:05:20 AM",
      "dateStarted": "Oct 4, 2020 10:05:20 AM",
      "dateFinished": "Oct 4, 2020 10:05:20 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 1000
    },
    {
      "text": "\ntry:\n    df \u003d spark.read.format(\"delta\").load(battery_data_table).toPandas()\nexcept:\n    print(\"Failed loading table\")\n",
      "user": "yoav.salarios@harman.com",
      "dateUpdated": "Oct 4, 2020 10:05:24 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {
          "battery_data_table": "s3://qubole-innovation-dev/battery-prognosis/delta/R4/",
          "outlier_level": "general"
        },
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [
          {
            "id": 30,
            "jobUrl": "https://us.qubole.com/cluster-proxy?encodedUrl\u003dhttp%3A%2F%2F10.158.225.61%3A8088%2Fproxy%2Fapplication_1601798719164_0001/jobs/job?spark\u003dtrue\u0026id\u003d30",
            "numTasks": 102,
            "numCompletedTasks": 50,
            "stages": [
              {
                "id": 63,
                "completed": true,
                "status": "Skipped",
                "stageUrl": "https://us.qubole.com/cluster-proxy?encodedUrl\u003dhttp%3A%2F%2F10.158.225.61%3A8088%2Fproxy%2Fapplication_1601798719164_0001/stages/stage/?id\u003d63\u0026attempt\u003d0",
                "numCompleteTasks": 0,
                "numActiveTasks": 0,
                "numFailedTasks": 0,
                "numTotalTasks": 0
              },
              {
                "id": 64,
                "completed": false,
                "status": "Skipped",
                "stageUrl": "https://us.qubole.com/cluster-proxy?encodedUrl\u003dhttp%3A%2F%2F10.158.225.61%3A8088%2Fproxy%2Fapplication_1601798719164_0001/stages/stage/?id\u003d64\u0026attempt\u003d0",
                "numCompleteTasks": 0,
                "numActiveTasks": 0,
                "numFailedTasks": 0,
                "numTotalTasks": 52
              },
              {
                "id": 65,
                "completed": true,
                "status": "Completed",
                "stageUrl": "https://us.qubole.com/cluster-proxy?encodedUrl\u003dhttp%3A%2F%2F10.158.225.61%3A8088%2Fproxy%2Fapplication_1601798719164_0001/stages/stage/?id\u003d65\u0026attempt\u003d0",
                "numCompleteTasks": 50,
                "numActiveTasks": 0,
                "numFailedTasks": 0,
                "numTotalTasks": 50
              }
            ],
            "status": "Success"
          },
          {
            "id": 31,
            "jobUrl": "https://us.qubole.com/cluster-proxy?encodedUrl\u003dhttp%3A%2F%2F10.158.225.61%3A8088%2Fproxy%2Fapplication_1601798719164_0001/jobs/job?spark\u003dtrue\u0026id\u003d31",
            "numTasks": 7,
            "numCompletedTasks": 7,
            "stages": [
              {
                "id": 66,
                "completed": true,
                "status": "Completed",
                "stageUrl": "https://us.qubole.com/cluster-proxy?encodedUrl\u003dhttp%3A%2F%2F10.158.225.61%3A8088%2Fproxy%2Fapplication_1601798719164_0001/stages/stage/?id\u003d66\u0026attempt\u003d0",
                "numCompleteTasks": 7,
                "numActiveTasks": 0,
                "numFailedTasks": 0,
                "numTotalTasks": 7
              }
            ],
            "status": "Success"
          }
        ],
        "numCompletedTasks": 57,
        "numTasks": 109,
        "truncated": false
      },
      "version": "v1",
      "jobName": "paragraph_1601441779518_-862312010",
      "id": "20200930-045619_1553011030_q_NFXV8WWJ5T1601379489",
      "dateCreated": "Sep 30, 2020 4:56:19 AM",
      "dateSubmitted": "Oct 4, 2020 10:05:24 AM",
      "dateStarted": "Oct 4, 2020 10:05:25 AM",
      "dateFinished": "Oct 4, 2020 10:05:36 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 1000
    },
    {
      "text": "\ntry:\n    \u0027\u0027\u0027\n    Filter by device ID: HULSG5RV815643 / HUBF1LQCD15649\n    \u0027\u0027\u0027\n    df \u003d df[(df[\u0027key\u0027] \u003d\u003d \"CarBatteryVoltage\") \u0026 (df[\u0027deviceId\u0027]\u003d\u003d\"HULSG5RV815643\")]\n    \n    \u0027\u0027\u0027\n    Order by timestamp\n    \u0027\u0027\u0027\n    df \u003d df.sort_values(by\u003d\u0027timestamp\u0027, ascending\u003dTrue)\n\n    \u0027\u0027\u0027\n    Select relevant columns\n    \u0027\u0027\u0027\n    df \u003d df[[\u0027timestamp\u0027, \u0027value\u0027]]\n    \n    \u0027\u0027\u0027\n    Lag timestamp and value\n    \u0027\u0027\u0027\n    df[\u0027timestamp_lagged\u0027] \u003d df[\u0027timestamp\u0027].shift(1)\n\n    df[\u0027value_lagged\u0027] \u003d df[\u0027value\u0027].shift(1)\n\n    \u0027\u0027\u0027\n    Drop missing value (first row)\n    \u0027\u0027\u0027\n    df \u003d df.loc[df[\u0027value_lagged\u0027].notnull(),list(df.columns)]\n\n    \u0027\u0027\u0027\n    Add PK\n    \u0027\u0027\u0027\n    df[\u0027Record\u0027] \u003d list(range(0,len(df)))\n\n    \u0027\u0027\u0027\n    Convert timestamp_lagged to integer\n    \u0027\u0027\u0027\n    df[\u0027timestamp_lagged\u0027] \u003d df[\u0027timestamp_lagged\u0027].astype(int)\n    df[\u0027value\u0027] \u003d df[\u0027value\u0027].astype(float)\n    df[\u0027value_lagged\u0027] \u003d df[\u0027value_lagged\u0027].astype(float)\n    \n    \u0027\u0027\u0027\n    Calculate the slope: (current volatge - previous voltage)  / (current TS - previous TS)\n\n    \u0027\u0027\u0027\n    df[\u0027slope\u0027] \u003d  (df[\u0027value\u0027] - df[\u0027value_lagged\u0027]) / (df[\u0027timestamp\u0027] - df[\u0027timestamp_lagged\u0027])\n    df[\u0027change_in_voltage\u0027] \u003d df[\u0027value\u0027] - df[\u0027value_lagged\u0027]\n\n    \u0027\u0027\u0027\n    Identify and label all point anomalies\n\n    Lower: Q1 - 1.5*IQR\n    Upper: Q3 + 1.5*IQR\n    \u0027\u0027\u0027\n\n\n    def outlier_labeler(data,thresh):\n        df_copy \u003d data\n        quartile1 \u003d list(df_copy[\u0027slope\u0027].quantile([0.25,0.75]))[0]\n        quartile3 \u003d list(df_copy[\u0027slope\u0027].quantile([0.25,0.75]))[1]\n        iqr \u003d quartile3 - quartile1\n\n        lower_bound \u003d quartile1 - (thresh*iqr)\n        upper_bound \u003d quartile3 + (thresh*iqr)\n\n        lower_anomalies \u003d df_copy[df_copy[\u0027slope\u0027] \u003c lower_bound]\n        upper_anomalies \u003d df_copy[df_copy[\u0027slope\u0027] \u003e upper_bound]\n    \n        output \u003d list()\n    \n        for x in range(0,len(df_copy)):\n            if (df_copy.iloc[x,-2] \u003e upper_bound) | (df_copy.iloc[x,-2] \u003c lower_bound):\n                output.append(1)\n            else:\n                output.append(0)\n        return(output)\n    \n    df[\u0027Box Plot Outlier\u0027] \u003d outlier_labeler(df,threshold)\n    \n    \u0027\u0027\u0027\n    Separate anomalies and normal points\n    \u0027\u0027\u0027\n    boxplot_anomalies \u003d df[df[\u0027Box Plot Outlier\u0027]\u003d\u003d1]\n\n    normal_data \u003d df[~df[\u0027Record\u0027].isin(list(boxplot_anomalies[\u0027Record\u0027]))]\n\n    \u0027\u0027\u0027\n    Plot voltages\n    \u0027\u0027\u0027\n    boxplot_anomalies[\u0027timestamp\u0027] \u003d [int(str(x)[0:-3]) for x in list(boxplot_anomalies[\u0027timestamp\u0027])]\n    boxplot_anomalies[\u0027datetime\u0027] \u003d [time.strftime(\u0027%Y-%m-%d %H:%M:%S\u0027, time.localtime(y)) for y in list(boxplot_anomalies[\u0027timestamp\u0027])]\n    boxplot_anomalies[\u0027date\u0027] \u003d [x.split(\" \")[0] for x in list(boxplot_anomalies[\u0027datetime\u0027])]\n    boxplot_anomalies[\u0027time\u0027] \u003d [x.split(\" \")[1] for x in list(boxplot_anomalies[\u0027datetime\u0027])]\n\n    normal_data[\u0027timestamp\u0027] \u003d [int(str(x)[0:-3]) for x in list(normal_data[\u0027timestamp\u0027])]\n    normal_data[\u0027datetime\u0027] \u003d [time.strftime(\u0027%Y-%m-%d %H:%M:%S\u0027, time.localtime(y)) for y in list(normal_data[\u0027timestamp\u0027])]\n    normal_data[\u0027date\u0027] \u003d [x.split(\" \")[0] for x in list(normal_data[\u0027datetime\u0027])]\n    normal_data[\u0027time\u0027] \u003d [x.split(\" \")[1] for x in list(normal_data[\u0027datetime\u0027])]\n\n    def plot(plot_dic, height\u003d1000, width\u003d1000, **kwargs):\n        kwargs[\u0027output_type\u0027] \u003d \u0027div\u0027\n        plot_str \u003d plotly.offline.plot(plot_dic, **kwargs)\n        print(\u0027%%angular \u003cdiv style\u003d\"height: %ipx; width: %spx\"\u003e %s \u003c/div\u003e\u0027 % (height, width, plot_str))\n\n    trace1 \u003d go.Scatter(\n        x \u003d normal_data[\u0027datetime\u0027],\n        y \u003d normal_data[\u0027value\u0027],\n        mode \u003d \u0027markers\u0027,\n        name \u003d \u0027Normal Points\u0027\n    )\n\n    trace2 \u003d go.Scatter(\n        x \u003d boxplot_anomalies[\u0027datetime\u0027],\n        y \u003d boxplot_anomalies[\u0027value\u0027],\n        mode \u003d \u0027markers\u0027,\n        name \u003d \u0027Anomalies\u0027\n    )\n\n    layout \u003d dict(\n      title \u003d \u0027Timestamp vs Voltage\u0027,\n      xaxis \u003d dict(title\u003d\u0027Timestamp\u0027),\n      yaxis \u003d dict(title\u003d\u0027Voltage\u0027),\n      showlegend \u003d True,\n      height \u003d 800\n    )\n    data1 \u003d [trace1, trace2]\n    fig1 \u003d dict( data\u003ddata1, layout\u003dlayout )\n    plot(fig1,  show_link\u003dTrue)\n    \n\nexcept:\n    print(\"Please check input and try again\")",
      "user": "yoav.salarios@harman.com",
      "dateUpdated": "Oct 4, 2020 10:06:43 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 284.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {
          "Delta_Lake_Path": "",
          "battery_data_table": "s3://qubole-innovation-dev/battery-prognosis/delta/R4/",
          "outlier_level": "general",
          "bucket_name": "qubole-innovation-dev",
          "file_name": "s3://qubole-innovation-dev/battery-prognosis/delta/R2/"
        },
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v1",
      "jobName": "paragraph_1601393816793_-37383982",
      "id": "20200929-153656_1609471927_q_NFXV8WWJ5T1601379489",
      "dateCreated": "Sep 29, 2020 3:36:56 PM",
      "dateSubmitted": "Oct 4, 2020 10:06:43 AM",
      "dateStarted": "Oct 4, 2020 10:06:43 AM",
      "dateFinished": "Oct 4, 2020 10:06:44 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 1000
    }
  ],
  "name": "Battery Prognosis",
  "id": "NFXV8WWJ5T1601379489",
  "angularObjects": {
    "2FF8C78CH513061597902769926:shared_process": [],
    "2FF97YBUK513061597902769922:shared_process": [],
    "2FF97WTZN513061597902769926:shared_process": [],
    "2FFTCHXJP513061597902769926:shared_process": []
  },
  "config": {
    "isDashboard": false,
    "defaultLang": "pyspark"
  },
  "info": {},
  "source": "FCN"
}